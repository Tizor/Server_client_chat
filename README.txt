- Четвертая версия чата -

/** -----------------------------------------------------------
 *  --- ServerV3 - класс, описывающий логику работы сервера ---
 *  -----------------------------------------------------------
 * 1. Создание объекта Server.
 * 2. Создание объекта ServerSocket.
 * 3. Создание кэшированного пула потоков.
 * 4. Запуск while цикла.
 * 5. Ожидание подключения клиента к сокету.
 * 6. Добавление подключенного клиента в список активных пользователей.
 * 7. Создание объекта ClientHandlerV3, в который передается сокет активного пользователя.
 * 8. Запуск потока для ClientHandlerV3
 */

/** --------------------------------------------------------------------------------
 *  --- ClientHandlerV3 - вспомогательный класс для обработки различных запросов ---
 *  --------------------------------------------------------------------------------
 * 1. При создании объекта ClientHandlerV3, в него передается сокет акттивного пользователя, подключившегося через serverSocket.
 * 2. Создается поток на чтение из передаваемого сокета.
 * 3. Первые данные из потока - имя пользователя, которое он вводит при входе в чат.
 * 4. Далее идет сообщение, информирующее чат о новом пользователе.
 * 5. Выполнение метода sendMessage().
 * 6. Итого: при создании нового ClientHandlerV3 в чат отправляется сообщение из п.4.
 * 7. Запускается метод run().
 * 8. В цикле while идет непрерывное чтение входящего потока, созданном в конструкторе ClientHandlerV3 из п.2.
 * 9. Если входящее сообщение - "bye", то:
 *  9.1 Идет удаление пользователя из списка активных пользователей.
 *  9.2 Идет закрытие потоков на чтение/запись.
 *  9.2 Создается сообщение о покидании пользователем чата.
 *  9.3 Закрытие пользовательского сокета.
 *  9.4 Выполнение метода sendMessage().
 * 10. Если входящее сообщение не "bye", то:
 *  10.1 Из входящего потока ClientHandlerV3 формируется сообщение msg.
 *  10.2 Выполнение метода sendMessage().
 */

/** --------------------------------------------------------------
 *  ---------------- Метод sendMessageToAllClient() --------------
 *  --------------------------------------------------------------
 *  По списку клиентов из класса ServerV3 делает рассылку формируемого сообщения.
 *  В цикле for берем сокет каждого активного клиента, берем его OutputStream и отправляем в него соответствющее сообщение.
 * Метод flush() для BufferedWriter – он выталкивает содержимое буфера. Если этого не сделать, информация не будет передана, а, следовательно, не будет получена.
 * Если вам это кажется неудобным, не расстраивайтесь, всегда можно воспользоваться классом PrintWriter,
 * которым нужно обернуть out, указать вторым аргументом true и тогда выталкивание из буфера будет происходить автоматически.
 */

/** -------------------------------------------------------------
 *  -------- Метод returnGreetingOrGoodbyeMessage() -------------
 *  --------------------------------------------------------------
 *  Метод формирования GreetingMessage и GoodbyeMessage. Создан для удобочитаемости кода.
 *  messageType - параметр для выбора типа сообщения. 1 - GreetingMessage, 2 - GoodbyeMessage.
 *  clientName - имя пользователя.
 *  userSocketListSize - размер списка подключенных пользователей.
 */

/** -----------------------------------------------------------
 *  --- ClientV3 - класс, описывающий логику работы клиента ---
 *  -----------------------------------------------------------
 * 1. При создании объекта ClientV3 идет считывание имени пользователя с консоли.
 * 2. Создается сокет, подключающийся к сокету ServerV3.
 * 3. Запуск потока для Sender.
 * 4. Создание потока на чтение сообщений из сокета.
 * 5. Цикл на чтение и распечатку сообщений из потока.
 */

/** -----------------------------------------------------------------------
 *  ---------- Sender - клиентский класс для работы с сообщениями ---------
 *  -----------------------------------------------------------------------
 * 1. При создании объекта Sender, в него передается сокет сервера, к которому организуется подключение пользователя.
 * 2. Запускается метод run().
 * 3. Создается поток на чтение из консоли.
 * 4. Отправка имени клиента в поток.
 * 5. В цикле while идет непрерывное чтение входящего, из консоли, потока данных, и последующая отправка сообщений в поток сокета.
 * 6. Если входящее сообщение - "bye", идет закрытие потоков на чтение/запись.
 */